# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '9b3d1058-9df4-458a-a00c-62dbb707a569'
  imageRepositoryCheckVatId: 'checkvatid'
  imageRepositoryGetRates: 'getrates'
  imageRepositoryGetRatesMongo: 'getratesmongo'
  imageRepositoryFeedback: 'feedback'
  imageRepositoryGetAppInfo: 'getappinfo'
  containerRegistry: 'acrPaul.azurecr.io'
  dockerfilePathFeedback: '**/src/Feedback/dockerfile'
  dockerfilePathGetRates: '**/src/GetRates/dockerfile'
  dockerfilePathGetRatesMongo: '**/src/GetRatesMongo/dockerfile'
  dockerfilePathGetAppInfo: '**/src/GetAppInfo/dockerfile'
  dockerfilePathCheckVatId: '**/src/CheckVatId/dockerfile'
  tag: '$(Build.BuildNumber)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  
  # Name of the new namespace being created to deploy the PR changes.
  k8sNamespaceForPR: '$(system.pullRequest.pullRequestNumber)'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: BuildCheckvat
    displayName: Build Check Vat Id
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepositoryCheckVatId)
        dockerfile: $(dockerfilePathCheckVatId)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          
    - upload: manifests
      artifact: manifests
  - job: BuildGetrates
    displayName: Build GetRates
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepositoryGetRates)
        dockerfile: $(dockerfilePathGetRates)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          
    - upload: manifests
      artifact: manifests

  - job: BuildGetRatesMongo
    displayName: Build GetRatesMongo
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepositoryGetRatesMongo)
        dockerfile: $(dockerfilePathGetRatesMongo)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          
    - upload: manifests
      artifact: manifests

  - job: BuildFeedback
    displayName: Build Feedback
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepositoryFeedback)
        dockerfile: $(dockerfilePathFeedback)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          
    - upload: manifests
      artifact: manifests

  - job: BuildGetAppInfo
    displayName: Build GetAppInfo
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepositoryGetAppInfo)
        dockerfile: $(dockerfilePathGetAppInfo)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          
    - upload: manifests
      artifact: manifests

- stage: DeployCheckVatId
  displayName: Deploy CheckVatId
  dependsOn: Build

  jobs:
  - deployment: DeployCheckVatId
    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'VATCompose-1081.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/checkvatid-deployment.yaml
                $(Pipeline.Workspace)/manifests/checkvatid-service.yaml
              containers: |
                $(containerRegistry)/$(imageRepositoryCheckVatId):$(tag)

- stage: DeployGetRates
  displayName: Deploy GetRates
  dependsOn: DeployCheckVatId

  jobs:
  - deployment: DeployGetRates
    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'VATCompose-1081.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/getrates-deployment.yaml
                $(Pipeline.Workspace)/manifests/getrates-service.yaml
              containers: |
                $(containerRegistry)/$(imageRepositoryGetRates):$(tag)

- stage: DeployGetRatesMongo
  displayName: Deploy GetRatesMongo
  dependsOn: DeployGetRates

  jobs:
  - deployment: DeployGetRatesMongo
    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    displayName: Deploy GetRatesMongo
    pool:
      vmImage: $(vmImageName)
    environment: 'VATCompose-1081.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/getratesmongo-deployment.yaml
                $(Pipeline.Workspace)/manifests/getratesmongo-service.yaml
              containers: |
                $(containerRegistry)/$(imageRepositoryGetRatesMongo):$(tag)

- stage: DeployFeedback
  displayName: Deploy Feedback
  dependsOn: DeployGetRatesMongo

  jobs:
  - deployment: DeployFeedback
    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    displayName: Deploy Feedback
    pool:
      vmImage: $(vmImageName)
    environment: 'VATCompose-1081.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/feedback-deployment.yaml
                $(Pipeline.Workspace)/manifests/feedback-service.yaml
              containers: |
                $(containerRegistry)/$(imageRepositoryFeedback):$(tag)

- stage: DeployGetAppInfo
  displayName: Deploy GetAppInfo
  dependsOn: DeployFeedback

  jobs:
  - deployment: DeployGetAppInfo
    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    displayName: Deploy GetAppInfo
    pool:
      vmImage: $(vmImageName)
    environment: 'VATCompose-1081.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/getappinfo-deployment.yaml
                $(Pipeline.Workspace)/manifests/getappinfo-service.yaml
              containers: |
                $(containerRegistry)/$(imageRepositoryGetAppInfo):$(tag)

  - deployment: DeployPullRequest
    displayName: Deploy Pull request
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
    pool:
      vmImage: $(vmImageName)
      
    environment: 'VATCompose-1081.$(k8sNamespaceForPR)'
    strategy:
      runOnce:
        deploy:
          steps:
          - reviewApp: default
          - task: Kubernetes@1
            displayName: 'Create a new namespace for the pull request'
            inputs:
              command: apply
              useConfigurationFile: true
              inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(k8sNamespaceForPR)" }}'          
          - task: KubernetesManifest@0
            displayName: Deploy to the new namespace in the Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(k8sNamespaceForPR)
              manifests: |
                $(Pipeline.Workspace)/manifests/checkvatid-deployment.yaml
                $(Pipeline.Workspace)/manifests/checkvatid-service.yaml
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)          
          - task: Kubernetes@1
            name: get
            displayName: 'Get services in the new namespace'
            continueOnError: true
            inputs:
              command: get
              namespace: $(k8sNamespaceForPR)
              arguments: svc
              outputFormat: jsonpath='http://{.items[0].status.loadBalancer.ingress[0].ip}:{.items[0].spec.ports[0].port}'
              
          # Getting the IP of the deployed service and writing it to a variable for posing comment
          - script: |
              url="$(get.KubectlOutput)"
              message="Your review app has been deployed"
              if [ ! -z "$url" -a "$url" != "http://:" ] 
              then
                message="${message} and is available at $url.<br><br>[Learn More](https://aka.ms/testwithreviewapps) about how to test and provide feedback for the app."
              fi
              echo "##vso[task.setvariable variable=GITHUB_COMMENT]$message"
